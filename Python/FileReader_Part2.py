# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GauMaqUIhb49DDg2zWV4gS24GqFprxY1
"""

# ToDo: Comentar el codigo acorde a los outputs de debug ("#Deb: hola mundo")

class LineaEnsamblador: #Clase para determinar que hacer con cada linea del archivo
    def __init__(self, linea): #Constructor de la función, linea es un argumenta que acepta un Array de cadenas de texto
        self.linea = linea.strip() #Le quita a cada elemento del Array cualquier espacio en blanco al inicio y al final de cada elemento.
        self.etiqueta = None
        self.codop = None
        self.operando = None
        self.tipo = None


    def procesar_linea(self): #Empieza a procesar cada linea de texto
        if self.linea.startswith(";"): #Si esta linea empieza con ;
            self.tipo = "COMENTARIO" #Escribe comentario a la variable "tipo"
        else:
            partes = self.linea.split() #crea un lista con cada una de las pálabras de la linea actual

            if len(partes) == 3: # Si existen 3 palabras en esta lista:
                self.etiqueta = partes[0].replace(":", "") #Reemplaza los 2 puntos de la primer palabra con un vacio
                self.codop = partes[1] #Reemplaza codop con la segunda palabra de la lista
                self.operando = partes[2] #Reemplaza operando con la tercer palabra de la lista
            elif len(partes) == 2: #Si solo existen 2 palabras
                if ":" in partes[0]: #Si los 2 puntos existen en la primer palabra de la lista
                    self.etiqueta = partes[0].replace(":", "") #Lo reemplaza con un vacio
                    self.codop = partes[1] #reemplaza codop con la segunda palabra
                else: #de otra manera
                    self.codop = partes[0] #codop es reemplazado por la primer palabra de la lista
                    self.operando = partes[1] #operando es reemplazado por la segunda palabra de la lista
            elif len(partes) == 1: #Si solo existe una palabra
                self.codop = partes[0] #Codop es reemplazado
            else:
                raise ValueError("Línea inválida.") #Cualquier otro caso, arroja un error

    # ToDo: Agregar algun tipo de validacion para solo devolver el tipo especifico, esto puede servirnos en dado caso de necesitar identificar indexados.
    def imprimir(self): #Función que usamos para imprimir que es cada linea
        if self.tipo == "COMENTARIO": #Si el tipo es comentario
            print("COMENTARIO") #Imprimimos comentario en esta linea
        else: #En otro caso
            etiqueta = self.etiqueta if self.etiqueta else "null"
            codop = self.codop if self.codop else "null" #Se asigna el valor de la variable de clase a la variable local, pero si no tiene valor, se le asigna la cadena "null"
            operando = self.operando if self.operando else "null"
            print(f"ETIQUETA= {etiqueta}") #Imprime cada valor de las variables anteriormente asignadas
            print(f"CODOP= {codop}")
            print(f"OPERANDO= {operando}")
            print("[--------------------------]"); #Separador de lineas



# ToDo: Maybe organizar esto para poder darle uso a futuro.
# !!!   No me hagan mucho caso en este
class ProcesadorASM: #Clase que se encarga de manejar los archivos que llegan al programa
    def __init__(self, archivo): #Constructor de la clase
        self.archivo = archivo #Archivo en el argumento acepta la ruta del archivo
        self.lineas = [] #Descompone el archivo en sus distintas lineas de código y las pone en un Array

    def leer_archivo(self): #Función para leer las lineas del archivo que se introdujo
        try:
            with open(self.archivo, 'r') as f:
                self.lineas = f.readlines() #Devuelve una lista de todas las lineas separadas del Array
        except FileNotFoundError:
            print(f"Error: el archivo {self.archivo} no se encontró.") #de no existir archivo, lanza error

    def procesar_lineas(self): #Función para revisar que hacer con cada linea
        for linea in self.lineas: #por cada linea en el Array "Lineas"
            linea_ensamblador = LineaEnsamblador(linea) #Crea el constructor de la función "LineaEnsamblador" enviando el arreglo "linea" como argumento
            linea_ensamblador.procesar_linea() #se procesa cada linea para su impresión
            linea_ensamblador.imprimir() #Y se imprime el resultado de cada una


# Todo: Cambiar esta linea para poder añadir el selector de archivos, con Flet (Byron)
procesador = ProcesadorASM("") #Programa principal, se crea el objeto de la clase ProcesadorASM y se envia la ruta del archivo a utilizar
procesador.leer_archivo() #Se llama a la función para leer todas las lineas del archivo si es que existe
procesador.procesar_lineas() #Se procesa cada linea del archivo para mostrar el resultado final

